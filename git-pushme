#!/usr/bin/perl -w

=head1 NAME

git-pushme - Push your current branch

=head1 DESCRIPTION

This will push the branch you're currently in to the remote that it's
tracking, if there is one.  This avoids having to correctly type the
current branch name, but gives you the benefit of not accidentally
pushing branches that aren't ready.

=head1 SYNOPSIS

    git-pushme [-f | --force] [<commit>]

        -f        - Force
        <commit>  - The name of a commit

=cut

use 5.005;
use strict;
use Getopt::Long ();
use Pod::Usage ();
use Term::ANSIColor ();
use Carp ();

Getopt::Long::Configure( 'bundling_override' );

Main( @ARGV );
exit;

sub Main {

    # Command line options
    local @ARGV = @_;
    my $do_force = 0;
    Getopt::Long::GetOptions(
        'f|force' => \ $do_force,
        'h|help'  => \ &Pod::Usage::pod2usage,
    )
      or Pod::Usage::pod2usage();

    # Command line commit
    my $commit;
    if ( 1 == @ARGV ) {
        $commit = shift @ARGV;
    }

    # Command line argument handling is done
    if ( @ARGV ) {
        Pod::Usage::pod2usage();
    }

    # Get the current branch
    my $branch = current_branch();
    if ( ! defined $branch ) {
        print STDERR Term::ANSIColor::colored( 'Not on any branch that I can find!', 'red' ), "\n";
        exit;
    }

    # Get the remote
    my $remote = config( "branch.$branch.remote" );
    if ( ! $remote ) {
        print STDERR Term::ANSIColor::colored( qq{Your branch is not tracking a remote branch.  Consider using "git corb"}, 'red' ), "\n";
        exit;
    }

    my $thing_to_push;
    if ( $commit ) {

        # Allow the user to specify a SHA that's not at the tip.  If
        # they make a mistake here, they should get a non fast-forward
        # error.
        $thing_to_push = "${commit}:$branch";
    }
    else {

        # The ordinary case. Just the branch.
        $thing_to_push = $branch;
    }

    # Push it!
    my @flags;
    if ( $do_force ) {
        push @flags, '-f';
    }
    exec 'git', 'push', @flags, $remote, $thing_to_push;
}

sub current_branch {
    my $branch = `git symbolic-ref HEAD`;
    return undef if $?;

    chomp $branch;
    $branch =~ s{^refs/heads/}{};
    return $branch;
}

sub config {
    my ( $name ) = @_;
    my $value = `git config $name`;
    my $exit_value = $? >> 8;
    if ( 0 == $exit_value ) {
        chomp $value;
        return $value;
    }
    elsif ( 1 == $exit_value ) {
        # git config exits with 1 when the value doesn't exit
        return '';
    }
    else {
        Carp::croak(qq{"git config $name" unexpectedly returned exit value $exit_value});
    }
}

sub Run {
    my $result = `@_`;
    if ( $? ) {
        my $exit_code = $? >> 8;
        Carp::croak(qq{"@_" unexpectedly returned exit value $exit_code});
    }
    return $result;
}

# Local Variables:
# mode: cperl
# indent-tabs-mode: nil
# End:
