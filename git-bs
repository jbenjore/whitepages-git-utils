#!/usr/bin/perl -w

=head1 NAME

git bs - Branch status

=head1 DESCRIPTION

Report branch status for all your tracking branches and optionally sync them

=head1 SYNOPSIS

    git bs

        -f --fetch
        -p --pull
        -q --quiet
        -v --verbose
        -r --remote-only
        -n --stat --no-stat
        -s --stash
        -h --help

=cut

use strict;
use warnings;
use Getopt::Long ();
use Pod::Usage ();
use Term::ANSIColor ();
use Carp ();
use vars qw( $DoRemoteOnly $DoPullme $UseColor );

Getopt::Long::Configure( 'bundling_override' );

Main( @ARGV );
exit;

sub Main {

    # Command line options
    local @ARGV = @_;
    my $is_quiet       = 0;
    my $is_verbose     = 0;
    my $do_fetch       = 0;
    $DoPullme          = 0;
    $DoRemoteOnly      = 0;
    my $do_stat        = 0;
    my $do_stash       = 0;
    Getopt::Long::GetOptions(
        'h|help'        => \ &Pod::Usage::pod2usage,
        'q|quiet'       => sub {
            $is_quiet = 1;
            $is_verbose = 0;
        },
        'v|verbose'     => sub {
            $is_quiet = 0;
            $is_verbose = 1;
        },

        'f|fetch'       => \ $do_fetch,
        'p|pull'        => \ $DoPullme,
        'r|remote-only' => \ $DoRemoteOnly,
        'stat!'         => \ $do_stat,
        'n'             => sub { $do_stat = 0 },
        's|stash'       => \ $do_stash,
    )
        or Pod::Usage::pod2usage();

    # Command line argument handling is done. If there are any
    # remaining arguments, this likely means the user did something
    # wrong.
    if ( @ARGV ) {
        Pod::Usage::pod2usage();
    }

    if ( $do_fetch && ! $DoPullme ) {
        my @args;
        if ( $is_quiet ) {
            push @args, '-q';
        }
        if ( $is_verbose ) {
            push @args, '-v';
        }

        for my $remote ( all_remotes() ) {
            print "] git fetch @args $remote\n";
            system 'git', 'fetch', @args, $remote;
            exit $? >> 8 if $?;
        }
    }
    elsif ( $DoPullme ) {
        print "] git fastforward -f\n";
        system 'git', 'fastforward', '-f';
        exit $? >> 8 if $?;
    }


    # Stash all edits prior to listing status
    #
    my $did_stash = 0;
    if ( $do_stash ) {
        print "\n";
        print "] git stash save git-bs auto-stash\n";
        my $stash_log = Run('git stash save git-bs auto-stash');
        $did_stash = $stash_log =~ /No local changes/;
    }


    # Print status
    #
    my $current_branch = current_branch();
    if ( defined $current_branch ) {
        print "# On branch $current_branch\n";
        print_branch_status( $current_branch );
        print "#\n";

        for my $branch (
            sort
            grep { $_ ne $current_branch }
            local_branches()
        ) {
            print_branch_status( $branch );
        }
    }
    else {
        print "# @{[ red( 'Not currently on any branch' )]}\n";
    }

    # Unstash anything we stashed
    #
    if ( $did_stash ) {
        print "\n";
        print "] git stash pop\n";
        system 'git stash pop';
    }

    return;
}

sub all_remotes {
    return Run('git remote') =~ /(\S+)/g;
}

sub current_branch {
    my $branch = `git symbolic-ref HEAD 2>/dev/null`;
    return undef if $?;

    chomp $branch;
    $branch =~ s{^refs/heads/}{};
    return $branch;
}

sub print_branch_status {
    my ( $branch ) = @_;

    my $remote        = config( "branch.$branch.remote" );
    my $remote_branch = config( "branch.$branch.merge" );
    $remote_branch =~ s{^.+/}{};
    my $track = "$remote/$remote_branch";

    if ( ! $remote ) {
        if ( ! $DoRemoteOnly ) {
            print "# . $branch is only \e[1mlocal\e[0m\n";
        }
    }
    elsif ( ! ref_exists( "refs/remotes/$remote/$remote_branch" ) ) {
        print "# ! $branch is tracking \e[1mnon-existent\e[0m remote branch $track\n";
    }
    else {
        my $behind = count_commits( "$branch..$track" );
        my $ahead  = count_commits( "$track..$branch" );

        if ( $behind && $ahead ) {
            print "# X $branch and $track have \e[1mdiverged\e[0m by $ahead and $behind commits\n";
        }
        elsif ( $behind ) {
            print "# < $branch is \e[1mbehind\e[0m $track by $behind commits\n";
            if ( $DoPullme ) {
                print "\n";
                print "] git checkout $branch\n";
                system 'git', 'corb', $branch;
                exit $? >> 8 if $?;
                print "\n";
            }
        }
        elsif ( $ahead ) {
            print "# > $branch is \e[1mahead\e[0m of $track by $ahead commits\n";
        }
        else {
            print "# = $branch is \e[1mcurrent\e[0m with $track\n";
        }
    }

    return;
}

sub ref_exists {
    my ( $pattern ) = @_;

    my $value = Run("git for-each-ref $pattern");
    chomp $value;
    return $value;
}

sub local_branches {
    my $heads = Run( 'git for-each-ref refs/heads' );
    return $heads =~ m{refs/heads/(\S+)$}mg;
}

sub count_commits {
    my ( $ref_spec ) = @_;
    my $rev_count = Run( "git rev-list $ref_spec | wc -l" );
    chomp $rev_count;
    return 0 + $rev_count;
}


sub config {
    my ( $name ) = @_;
    my $value = `git config $name`;
    my $exit_value = $? >> 8;
    if ( 0 == $exit_value ) {
        chomp $value;
        return $value;
    }
    elsif ( 1 == $exit_value ) {
        # git config exits with 1 when the value doesn't exit
        return '';
    }
    else {
        Carp::croak(qq{"git config $name" unexpectedly returned exit value $exit_value});
    }
}

sub Run {
    my $result = `@_`;
    if ( $? ) {
        my $exit_code = $? >> 8;
        Carp::croak(qq{"@_" unexpectedly returned exit value $exit_code});
    }
    return $result;
}

sub red {
    if ( -t STDOUT || $UseColor ) {
        return Term::ANSIColor::colored( "@_", 'red' );
    }
    else {
        return "@_";
    }
}

# Local Variables:
# mode: cperl
# indent-tabs-mode: nil
# End:
